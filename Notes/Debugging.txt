//------------------------------------

Raising Exceptions

Exceptions are raised with a raise statement. In code, a raise statement consists of the following:
    * The raise keyword
    * A call to the Exception() function
    * A string with a helpful error message passed to the Exception() function

raise Exception('This is the error message.')

//------------------------------------

Getting the Traceback as a string

def spam():
    bacon()

def bacon():
    raise Exception('This is the error message.')

spam()

Traceback (most recent call last):
  File "errorExample.py", line 7, in <module>
    spam()
  File "errorExample.py", line 2, in spam
    bacon()
  File "errorExample.py", line 5, in bacon
    raise Exception('This is the error message.')
Exception: This is the error message.

traceback.format_exc(): This function is useful if we want the information from an exception's traceback but also want an except statement to gracefully handle the exception.

import traceback

try:
    raise Exception('This is the error message.')
    
except:
    errorFile = open('errorInfo.txt', 'w')
    errorFile.write(traceback.format_exc())
    errorFile.close()
    print('This traceback info was written to errorInfo.txt')

111
The traceback info was written to errorInfo.txt

//-----------------------------------

Assertions

    * The assert keyword
    * A condition (that is, an exception that evaluates to True or False)
    * A comma
    * A string to display when the condition is False

ages = [26, 57, 92, 54, 22. 15, 17, 80, 47, 73]
ages.sort()
ages

[15, 17, 22, 26, 47, 54, 57, 73, 80, 92]

assert

ages[0] <= ages[-1] # Assert that the first age is <= the last age.

ages.reverse()

ages

assert ages[0] <= ages[-1] # Assert that the first age is <= the last age.

Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
AssertError

-> Assertions can be disabled using python -O my_script.py

//-----------------------------------

Using the logging module
To enable the logging module to display log messages on your screen as your program runs, copy the following to the top of your program (but under the #! python shebang line)

import logging
logging.basicConfig(level = logging.DEBUG, format = ' %(asctime)s - %(levelname)s - %(message)s')


import logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s -  %(levelname)s
-  %(message)s')
logging.debug('Start of program')

def factorial(n):
    logging.debug('Start of factorial(%s%%)'  % (n))
    total = 1
    for i in range(n + 1):
        total *= i
        logging.debug('i is ' + str(i) + ', total is ' + str(total))
    logging.debug('End of factorial(%s%%)'  % (n))
    return total

print(factorial(5))
logging.debug('End of program')

2019-05-23 16:20:12,664 - DEBUG - Start of program
2019-05-23 16:20:12,664 - DEBUG - Start of factorial(5)
2019-05-23 16:20:12,665 - DEBUG - i is 0, total is 0
2019-05-23 16:20:12,668 - DEBUG - i is 1, total is 0
2019-05-23 16:20:12,670 - DEBUG - i is 2, total is 0
2019-05-23 16:20:12,673 - DEBUG - i is 3, total is 0
2019-05-23 16:20:12,675 - DEBUG - i is 4, total is 0
2019-05-23 16:20:12,678 - DEBUG - i is 5, total is 0
2019-05-23 16:20:12,680 - DEBUG - End of factorial(5)
0
2019-05-23 16:20:12,684 - DEBUG - End of program

-> You can disable logging messages with logging.disable(logging.CRITICAL) call.

//-----------------------------------

Logging Levels:

It provides a way to categorize your messages by importance.

DEBUG

logging.debug()

The lowest level. Used for small details. Usually you care about these messages only when diagnosing problems.

INFO

logging.info()

Used to record information on general events in your program or confirm that things are working at their point in the program.

WARNING

logging.warning()

Used to indicate a potential problem that doesn’t prevent the program from working but might do so in the future.

ERROR

logging.error()

Used to record an error that caused the program to fail to do something.

CRITICAL

logging.critical()

The highest level. Used to indicate a fatal error that has caused or is about to cause the program to stop running entirely.

The benefit of logging levels is that you can change what priority of logging message you want to see. Passing logging.DEBUG to the basicConfig() function’s level keyword argument will show messages from all the logging levels (DEBUG being the lowest level). But after developing your program some more, you may be interested only in errors. In that case, you can set basicConfig()’s level argument to logging.ERROR. This will show only ERROR and CRITICAL messages and skip the DEBUG, INFO, and WARNING messages.

//--------------------------------------

Disabling Logging

logging.disable(logging.CRITICAL)

logging.disable(): It will disable all the messages after it, so should be used just after import logging lone of code.

//--------------------------------------

Debugger

Continue:
Just continues to execute till the next breakpoint.

Step In:
Execute the next line of code and pauses once again.

Step Over:
Clicking the Step Over button will execute the next line of code, similar to the Step In button. However, if the next line of code is a function call, the Step Over button will “step over” the code in the function. The function’s code will be executed at full speed, and the debugger will pause as soon as the function call returns.

Step Out:
Clicking the Step Out button will cause the debugger to execute lines of code at full speed until it returns from the current function. If you have stepped into a function call with the Step In button and now simply want to keep executing instructions until you get back out, click the Out button to “step out” of the current function call.

Stop:
Just Stops Debugging
