CTRL-ALT-DEL

>>> import pyautogui
>>> wh = pyautogui.size() # Obtain the screen resolution.
>>> wh
Size(width=1920, height=1080)
>>> wh[0]
1920
>>> wh.width
1920

moving the mouse

>>> import pyautogui
>>> for i in range(10): # Move mouse in a square.
...       pyautogui.moveTo(100, 100, duration=0.25)
...       pyautogui.moveTo(200, 100, duration=0.25)
...       pyautogui.moveTo(200, 200, duration=0.25)
...       pyautogui.moveTo(100, 200, duration=0.25)

>>> import pyautogui
>>> for i in range(10):
...       pyautogui.move(100, 0, duration=0.25)   # right
...       pyautogui.move(0, 100, duration=0.25)   # down
...       pyautogui.move(-100, 0, duration=0.25)  # left
...       pyautogui.move(0, -100, duration=0.25)  # up

Getting the Mouse Position

>>> pyautogui.position() # Get current mouse position.
Point(x=311, y=622)
>>> pyautogui.position() # Get current mouse position again.
Point(x=377, y=481)
>>> p = pyautogui.position() # And again.
>>> p
Point(x=1536, y=637)
>>> p[0] # The x-coordinate is at index 0.
1536
>>> p.x # The x-coordinate is also in the x attribute.
1536

Clicking the Mouse

>>> import pyautogui
>>> pyautogui.click(10, 5) # Move mouse to (10, 5) and click.
>>>pyautogui.click(100, 150, button='left') #left,right,middle

others  : pyautogui.mouseDown(), pyautogui.mouseUp(), pyautogui.doubleClick(), pyautogui.rightClick(), pyautogui.middleClick()

Dragging the Mouse

pyautogui.dragTo()
pyautogui.drag()

```py
import pyautogui, time
time.sleep(5)
pyautogui.click()    # Click to make the window active.
distance = 300
change = 20
while distance > 0:
    pyautogui.drag(distance, 0, duration=0.2)   # Move right.
    distance = distance – change
    pyautogui.drag(0, distance, duration=0.2)   # Move down.
    pyautogui.drag(-distance, 0, duration=0.2)  # Move left.
    distance = distance – change
    pyautogui.drag(0, -distance, duration=0.2)  # Move up.
```

Scroll

>>> pyautogui.scroll(200)

planning mouse movements

>>> import pyautogui
>>> pyautogui.mouseInfo()

Getting a Screenshot

>>> import pyautogui
>>> im = pyautogui.screenshot()

Annalyzing the Screenshot

>>> import pyautogui
>>> pyautogui.pixel((0, 0))
(176, 176, 175)
>>> pyautogui.pixel((50, 200))
(130, 135, 144)

>>> import pyautogui
>>> pyautogui.pixel((50, 200))
(130, 135, 144)
>>> pyautogui.pixelMatchesColor(50, 200, (130, 135, 144))
True
>>> pyautogui.pixelMatchesColor(50, 200, (255, 135, 144))
False

Image Recognition

>>> import pyautogui
>>> b = pyautogui.locateOnScreen('submit.png')
>>> b
Box(left=643, top=745, width=70, height=29)
>>> b[0]
643
>>> b.left
643
>>> pyautogui.click('submit.png')
>>>pyautogui.click(b)
>>> list(pyautogui.locateAllOnScreen('submit.png'))
[(643, 745, 70, 29), (1007, 801, 70, 29)]

>>> pyautogui.click((643, 745, 70, 29))

```py
try:
    location = pyautogui.locateOnScreen('submit.png')
except:
    print('Image could not be found.')
```

Obtaining the Activity Window

#WINDOWS FEATURES ONLY ON WINDOWS
>>> import pyautogui
>>> fw = pyautogui.getActiveWindow()
>>> fw
Win32Window(hWnd=2034368)
>>> str(fw)
'<Win32Window left="500", top="300", width="2070", height="1208", title="Mu 1.0.1 – test1.py">'
>>> fw.title
'Mu 1.0.1 – test1.py'
>>> fw.size
(2070, 1208)
>>> fw.left, fw.top, fw.right, fw.bottom
(500, 300, 2070, 1208)
>>> fw.topleft
(256, 144)
>>> fw.area
2500560
>>> pyautogui.click(fw.left + 10, fw.top + 20)

other wats of obtaining windows

pyautogui.getAllWindows()
pyautogui.getWindowsAt(x, y)
pyautogui.getWindowsWithTitle(title)
pyautogui.getActiveWindow()

manipulating windows

>>> import pyautogui
>>> fw = pyautogui.getActiveWindow()
>>> fw.width # Gets the current width of the window.
1669
>>> fw.topleft # Gets the current position of the window.
(174, 153)
>>> fw.width = 1000 # Resizes the width.
>>> fw.topleft = (800, 400) # Moves the window.

>>> import pyautogui
>>> fw = pyautogui.getActiveWindow()
>>> fw.isMaximized # Returns True if window is maximized.
False
>>> fw.isMinimized # Returns True if window is minimized.
False
>>> fw.isActive # Returns True if window is the active window.
True
>>> fw.maximize() # Maximizes the window.
>>> fw.isMaximized
True
>>> fw.restore() # Undoes a minimize/maximize action.
>>> fw.minimize() # Minimizes the window.
>>> import time
>>> # Wait 5 seconds while you activate a different window:
>>> time.sleep(5); fw.activate()
>>> fw.close() # This will close the window you're typing in.

Sending a String from the keyboard

>>> pyautogui.click(100, 200); pyautogui.write('Hello, world!')
>>>pyautogui.write('Hello, world!', 0.25)

keynames

>>> pyautogui.write(['a', 'b', 'left', 'left', 'X', 'Y'])

Keyboard key string
Meaning

'a', 'b', 'c', 'A', 'B', 'C', '1', '2', '3', '!', '@', '#', and so on
The keys for single characters

'enter' (or 'return' or '\n')
The ENTER key

'esc'
The ESC key

'shiftleft', 'shiftright'
The left and right SHIFT keys

'altleft', 'altright'
The left and right ALT keys

'ctrlleft', 'ctrlright'
The left and right CTRL keys

'tab' (or '\t')
The TAB key

'backspace', 'delete'
The BACKSPACE and DELETE keys

'pageup', 'pagedown'
The PAGE UP and PAGE DOWN keys

'home', 'end'
The HOME and END keys

'up', 'down', 'left', 'right'
The up, down, left, and right arrow keys

'f1', 'f2', 'f3', and so on
The F1 to F12 keys

'volumemute', 'volumedown', 'volumeup'
The mute, volume down, and volume up keys (some keyboards do not have these keys, but your operating system will still be able to understand these simulated keypresses)

'pause'
The PAUSE key

'capslock', 'numlock', 'scrolllock'
The CAPS LOCK, NUM LOCK, and SCROLL LOCK keys

'insert'
The INS or INSERT key

'printscreen'
The PRTSC or PRINT SCREEN key

'winleft', 'winright'
The left and right WIN keys (on Windows)

'command'
The Command (image) key (on macOS)

'option'
The OPTION key (on macOS)


Pressing and Releasing the Keyboard

>>> pyautogui.keyDown('shift'); pyautogui.press('4'); pyautogui.keyUp('shift')

Hotkey combinations

pyautogui.keyDown('ctrl')
pyautogui.keyDown('c')
pyautogui.keyUp('c')
pyautogui.keyUp('ctrl')


or

pyautogui.hotkey('ctrl', 'c')


something

>>> import pyautogui
>>> pyautogui.sleep(3) # Pauses the program for 3 seconds.
>>> pyautogui.countdown(10) # Counts down over 10 seconds.
10 9 8 7 6 5 4 3 2 1
>>> print('Starting in ', end=''); pyautogui.countdown(3)
Starting in 3 2 1


Displaying Message Boxes

pyautogui.alert(text)
pyautogui.prompt(text)
pyautogui.password(text)

>>> import pyautogui
>>> pyautogui.alert('This is a message.', 'Important')
'OK'
>>> pyautogui.confirm('Do you want to continue?') # Click Cancel
'Cancel'
>>> pyautogui.prompt("What is your cat's name?")
'Zophie'
>>> pyautogui.password('What is the password?')
'hunter2'